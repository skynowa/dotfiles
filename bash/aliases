# ======= #
# Aliases #
# ======= #

# Utility
alias reload='source ~/dotfiles/bash/aliases'         # Reload aliases
alias ea='mate -w ~/dotfiles/bash/aliases && reload'  # Edit aliases
alias ee="mate ~/dotfiles/bash/env"                   #

# Common (Some are from Damian Conway)
alias a='ls -A'                      # -A all except literal . ..
alias la="ls -AlG"                   #
alias c='clear'                      # Clear screen
alias cdd='cd -'                     # Go to last dir cd'ed from
alias cl='clear; l'                  # Clear screen, list
alias cls='clear; ls'                # Clear screen, list
alias h='history'                    # Show history
alias l.='ls -d .[^.]*' 
alias l='ls -lhGt'                   # Long listing, recent first, -G color
alias lh="ls -lh"
alias ll='ls -lhG'                   # Long listing, human readable, no group info
alias lt='ls -lt'                    # Sort with recently modified first
alias md='mkdir -p'
alias ..='cd ..'                     # Move up one dir
alias ...="cd ../.."                 # Move up two dirs
alias ~="cd ~"                       # Go back to home
alias e='exit'                       # Exit
alias lsd='ls -l | grep "^d"'        # List only directories
alias tu='top -o cpu'                # Show processes by CPU
alias tm='top -o vsize'              # Show processes by memory
alias fs="stat -f \"%z bytes\""      # File size
alias rot13='tr a-zA-Z n-za-mN-ZA-M' # ROT13-encode and decode text

# IP addresses
alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
alias localip="ipconfig getifaddr en1"
alias ips="ifconfig -a | perl -nle'/(\d+\.\d+\.\d+\.\d+)/ && print $1'"
alias whois="whois -h whois-servers.net"

# Flush Directory Service cache
alias flush="dscacheutil -flushcache"

# Trim new lines and copy to clipboard
alias c="tr -d '\n' | pbcopy"

# Shortcuts
alias d="cd ~/Documents/Dropbox"
alias p="cd ~/Projects"
alias g="git"
alias v="vim"
if [[ "$OSTYPE" =~ ^darwin ]]; then
  alias m="mate ."
fi

# Empty the Trash
if [[ "$OSTYPE" =~ ^darwin ]]; then
  alias emptytrash="rm -rfv ~/.Trash"
fi

# Recursively delete `.DS_Store` files
if [[ "$OSTYPE" =~ ^darwin ]]; then
  alias cleanup="find . -name '*.DS_Store' -type f -ls -delete"
fi

# Finder operations (only for Mac OS X)
if [[ "$OSTYPE" =~ ^darwin ]]; then
  alias o='open . &'
  alias ff='open -a Firefox'
fi

# Always use color output for `ls`
if [[ "$OSTYPE" =~ ^darwin ]]; then
  alias ls="command ls -G"
else
	alias ls="command ls --color"
	export LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:'
fi

# ========= #
# Functions #
# ========= #

# Change into dir and list contents
function cdc() { 
  cd $1; ls 
}

# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the 
# Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
function httpcompression() {
  encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# All the dig info
function digga() {
  dig +nocmd "$1" any +multiline +noall +answer
}

# Create a new directory and enter it
function md() { 
  mkdir -p "$@" && cd "$@"
}

# Kill named process
function killnamed () { 
  ps ax | grep $1 | cut -d ' ' -f 2 | xargs kill 
}

# Zip recursively
function zipr() {
  zip -r $1.zip $1
}

# Convert Markdown to HTML
if [[ "$OSTYPE" =~ ^darwin ]]; then
  function markdown() { 
    /Applications/TextMate.app/Contents/SharedSupport/Support/bin/Markdown.pl $1 > $1.html 
  }
fi

# Setup a tunnel
function haproxyssh() { 
  ssh -L7997:127.0.0.1:7997 deploy@$1.com 
}

# Move files to trash (Mac OS X) [From http://github.com/suztomo/dotfiles]
if [[ "$OSTYPE" =~ ^darwin ]]; then
  function rmf(){
    for file in $*
    do
      __rm_single_file $file
    done
  }

  function __rm_single_file(){
    if ! [ -d ~/.Trash/ ]
    then
      command /bin/mkdir ~/.Trash
    fi

    if ! [ $# -eq 1 ]
    then
      echo "__rm_single_file: 1 argument required but $# passed."
      exit
    fi

    if [ -e $1 ]
    then
      BASENAME=`basename $1`
      NAME=$BASENAME
      COUNT=0
      while [ -e ~/.Trash/$NAME ]
      do
        COUNT=$(($COUNT+1))
        NAME="$BASENAME.$COUNT"
      done

      command /bin/mv $1 ~/.Trash/$NAME
    else
      echo "No such file or directory: $file"
    fi
  }
fi

# ===== #
# Nginx #
# ===== #

function nginx_stop() {
  ps ax | grep nginx | cut -d " " -f 1 | xargs sudo kill -9
}

function nginx_start() {
  sudo /opt/nginx/sbin/nginx
}

# === #
# Git #
# === #

alias ungit="find . -name '.git' -exec rm -rf {} \;"
alias gb='git branch'
alias gba='git branch -a'
alias gc='git commit -v'
alias gca='git commit -v -a'
alias gco='git checkout'
alias gd='git diff'
alias gdm='git diff master'
alias gl='git pull'
alias gnp="git-notpushed"
alias gp='git push'
alias gst='git status'
alias gt='git status'
alias g='git status'
alias eg='mate .git/config'

# Undo a `git push`
alias undopush="git push -f origin HEAD^:master"

# Commit pending changes and quote all args as message
function gg() { 
  git commit -v -a -m "$*"
}

# Git clone from GitHub
function gch() {
  git clone git://github.com/$USER/$1.git
}

# Setup a tracking branch from [remote] [branch_name]
function gbt() { 
  git branch --track $2 $1/$2 && git checkout $2 
}

# Quickly clobber a file and checkout
function grf() { 
  rm $1
  git checkout $1 
}

# Call from inside an initialized Git repo, with the name of the repo.
function new-git() {
  ssh git@example.com "mkdir $1.git && cd $1.git && git --bare init"
  git remote add origin git@example.com:$1.git
  git push origin master
  git config branch.master.remote origin
  git config branch.master.merge refs/heads/master
  git config push.default current
}